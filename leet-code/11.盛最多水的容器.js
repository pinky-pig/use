/*
 * @lc app=leetcode.cn id=11 lang=javascript
 *
 * [11] 盛最多水的容器
 *
 * https://leetcode.cn/problems/container-with-most-water/description/
 *
 * algorithms
 * Medium (60.07%)
 * Likes:    4920
 * Dislikes: 0
 * Total Accepted:    1.2M
 * Total Submissions: 2.1M
 * Testcase Example:  '[1,8,6,2,5,4,8,3,7]'
 *
 * 给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
 * 
 * 找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
 * 
 * 返回容器可以储存的最大水量。
 * 
 * 说明：你不能倾斜容器。
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 
 * 
 * 输入：[1,8,6,2,5,4,8,3,7]
 * 输出：49 
 * 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
 * 
 * 示例 2：
 * 
 * 
 * 输入：height = [1,1]
 * 输出：1
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * n == height.length
 * 2 <= n <= 10^5
 * 0 <= height[i] <= 10^4
 * 
 * 答：
 * 一开始两个指针一个指向开头一个指向结尾，此时容器的底是最大的。
 * 
 * 求面积这里就是高乘宽，这里高不固定，宽是固定的，
 * 计算那两根柱子面积最大，那么就是要每个柱子都有计算得到
 * 假如 height.length = 8
 * 那么就是先找当 
 * 宽 = 8 时，哪两根柱子包围的面积最大
 * 宽 = 7 时，哪两根柱子包围的面积最大
 * 宽 = 6 时，哪两根柱子包围的面积最大
 * ...
 * 宽 = 1 时，哪两根柱子包围的面积最大
 * 最终计算谁的面积最大。
 * 
 * 所以可以左右两指针移动，一直到碰撞
 * 那么问题就是如何找到两最高的柱子。
 * 
 * 当 宽 = 8 时，哪个柱子矮，就是哪个柱子为准。
 * 然后 宽 = 7 时，要么是左边柱子向右移动一下，要么就是右边柱子向左移动一下
 * 但是如果要是高的移动，
 * 那么新的柱子可能是比之前矮的那个高，那么还是按照没有移动的矮的为基准
 * 如果新的柱子比之前矮的还要矮，那么就以更矮的为基准，那么找出来的只会面积更小
 * 综上，移动高的柱子不合适，只会往小的找，不会去找大的
 * 如果要是矮的移动，
 * 那么新的柱子可能比之前矮的要高，那么就看比之前高的哪个高哪个矮了，然后以矮的为基准，那么面积就变大了
 * 新的柱子可能比之前矮的还要矮，那么就以新的最矮的为基准，那么面积变小了
 * 但是面积值取 Math.max 
 * 综上，移动矮的柱子，当 宽 = 7 时，面积可能会比 当 宽 = 7 时大。
 * 
 * 然后 宽 = 6 
 * ......
 * 
 * 最终得出面积最大。
 */

// @lc code=start
/**
 * @param {number[]} height
 * @return {number}
 */
var maxArea = function (height) {
  let i = 0, j = height.length - 1

  let result = 0

  while (i < j) {
    if (height[i] < height[j]) {
      result = Math.max(result, height[i] * (j - i))
      i++
    }else{
      result = Math.max(result, height[j] * (j - i))
      j--
    }
  }
  return result
};
// @lc code=end


